#Computing GC content

#First enter each sequence in their respective variable
#If less than 10 data sets then enter NA
#At the time of writing this program I was unaware of a better way of inputing the data and associating it to a variable for calculation

result = 0
sl = ''

sOne = input(str("sequence?"))
sTwo = input(str("sequence?"))
sThree = input(str("sequence?"))
sFour = input(str("sequence?"))
sFive = input(str("sequence?"))
sSix = input(str("sequence?"))
sSeven = input(str("sequence?"))
sEight = input(str("sequence?"))
sNine = input(str("sequence?"))
sTen = input(str("sequence?"))

#Associate each sequence with their respective name

slOne = input(str("sequence label?"))
slTwo = input(str("sequence label?"))
slThree = input(str("sequence label?"))
slFour = input(str("sequence label?"))
slFive = input(str("sequence label?"))
slSix = input(str("sequence label?"))
slSeven = input(str("sequence label?"))
slEight = input(str("sequence label?"))
slNine = input(str("sequence label?"))
slTen = input(str("sequence label?"))

#PCG denotes "Percent Cytosine and Guanine"

sOnePCG = float((sOne.count('G') + sOne.count('C')) / (sOne.count('G') + sOne.count('C') + sOne.count('A') + sOne.count('T')))
sTwoPCG = float((sTwo.count('G') + sTwo.count('C')) / (sTwo.count('G') + sTwo.count('C') + sTwo.count('A') + sTwo.count('T')))
sThreePCG = float((sThree.count('G') + sThree.count('C')) / (sThree.count('G') + sThree.count('C') + sThree.count('A') + sThree.count('T')))
sFourPCG = float((sFour.count('G') + sFour.count('C')) / (sFour.count('G') + sFour.count('C') + sFour.count('A') + sFour.count('T')))
sFivePCG = float((sFive.count('G') + sFive.count('C')) / (sFive.count('G') + sFive.count('C') + sFive.count('A') + sFive.count('T')))
sSixPCG = float((sSix.count('G') + sSix.count('C')) / (sSix.count('G') + sSix.count('C') + sSix.count('A') + sSix.count('T')))
sSevenPCG = float((sSeven.count('G') + sSeven.count('C')) / (sSeven.count('G') + sSeven.count('C') + sSeven.count('A') + sSeven.count('T')))
sEightPCG = float((sEight.count('G') + sEight.count('C')) / (sEight.count('G') + sEight.count('C') + sEight.count('A') + sEight.count('T')))
sNinePCG = float((sNine.count('G') + sNine.count('C')) / (sNine.count('G') + sNine.count('C') + sNine.count('A') + sNine.count('T')))
sTenPCG = float((sTen.count('G') + sTen.count('C')) / (sTen.count('G') + sTen.count('C') + sTen.count('A') + sTen.count('T')))

#Using a series of "if" statements, the program narrows down which sequence has the highest percent of guanine and cytosine, for each if-statement, the variable name is associated to the highest result value
if sOnePCG >= sTwoPCG:
	result = sOnePCG
	sl = slOne
else:
	result = sTwoPCG
	sl = slTwo

if result < sThreePCG:
	result = sThreePCG
	sl = slThree

if result < sFourPCG:
	result = sFourPCG
	sl = slFour

if result < sFivePCG:
	result = sFivePCG
	sl = slFive

if result < sSixPCG:
	result = sSixPCG
	sl = slSix

if result < sSevenPCG:
	result = sSevenPCG
	sl = slSeven

if result < sEightPCG:
	result = sEightPCG
	sl = slEight

if result < sNinePCG:
	result = sNinePCG
	sl = slNine

if result < sTenPCG:
	result = sTenPCG
	sl = slTen

#The two important variables are set to out put once the program has run (sl = sequence label of DNA sequence with highest percent of G and C, result = highest content percent in a given DNA sequence)

print(sl)
print(result*100)

# The results of the data set are:
#Rosalind_2514
#51.47540983606558

# Here is the data set
>Rosalind_6539
TAGGTCCAAGCCTTCGCCAGGAGTACATCGATCATCCGGATCCAGTCCCGATCAATGAAA
ATGGCGACGCGCTAGCTCCGTGGTATGTGGTAGCTGAGACATGCAGGACAAATATTGTGG
AAAGACGAGTCGTGGCAGAATCATCGATTGACGTTGAAGTACTTCTAACCCTTTATGATT
ACCCACATTTCTCGTGACGTCTGCCTCCTACTGGCATCGCGCTTGCCTAGAGAGCTCTGG
TGTAAAAATTACTACGTCGTTGTGCACAGACAAGGCCCGTCGCTTCCAGTAGTGTGGGAG
CCAACCGATACAGTTCGCAGGTTCGAGATTACCATCAATGTCTGGCGCTGCCTGGAAGCC
TATGGTGGACGACACGCCGATCACTATTCACGCCAGGCTCGAACCCTATTTGCTACGTCT
GGCTGCACTTAACCAACATCGTTCGCCTGGGTGTCAACATGGACGCTCTTCATACTTATC
GGGCTCCGTCCTAGCGAGTTCCTCTTAGTTTTATTAGCTCTCCTTCCGATGAAGCAGCCG
CTAAAGCCGTTTGCGTGTTCTTTTATATGATATAAAAGTGGGGACCATGGCAATCTATAC
TGCGCTAGGCACACGATCCGACATCCTGCGACGCTTATTGGAATATTTCGCAGAGGTACG
CCCCATTTGCGGGATGGGCCCACCGTGCAACCGGACAGCCGTCGGACCTAGGCTGCCGTT
TTCCAAGAGGTGGGTGAAACACGCTCTGACTTGCCTAACATACAGCGCTCAGGGAATAGG
TGGTCTATATCTGTCGGTTTCGTGAATACAAAGACGGATTCTGAGGTCGTAAAATCTAAG
GAACCCATTTGCGACTTCAGTACTCGGCGAGCTTCTCTCAAGGACGATCGGAAACGACGA
G
>Rosalind_3401
TTACACCGGTATTTGGGTTCCGGGTTTACTTCGCCTGGTACGATATGATAAAGCCCGCCT
ATCGTGGGCCCCCCGGCCTACATGTAATACTGGGCCTGAGAAGATCTCCCCATGTTCCAC
TCACAACACGATGGGGTAGAACAAGTAAAGAACTTGTACACGGGGTACCTCCCACGCCTG
GCAAGAGGATGAAGCTGACCGATCCGGCAAGTGTCAGTATTTACCATCGGATTAGCATTG
TCTGCCGCTGAGTCTTGGCTATCCCATGCTGCAGGGACACTGACTAGTATTTCCTGGACC
GCGTCGCTATTATTTCTAACCTACTGGACATCTAAGCGGATGAAGTGTTGATTCGTTGAG
CCGAAAAAATCTCTCTCGATGACCGAAGAGGCGCGCAATGTAATGTCATGACATCATTAC
GGACGTCGCATTGGGTGATACCAATGAACGTAATCGAGGGCCCCCTGCGAAGCTCTTACG
ACGGTCACACCCGATAAACCTCTGACTCCTTCCGGGGGGCTTGACAAAGAGGCCGGGCCC
TTTGACGGCATGGCCCCCGGACCACAACCGGACTAATAGTAAAGTTTAAGTCCATTCTTA
AAGAAATATTCACGTTAGCAGATGCCGTCAGTACTAGCGGTTGAACGAATACAAGGAGGA
TTTCGCGGTCCCTCGGTGAGAAGCAGGCACAAAAATCCCTCATACACTGTGAAACTTCAC
ACATATAATAAGTGAGACTGGTCGTTCGGTAAAGAGTATGGCGGCTTCCTGCCAAGTGCC
ACCCGGAGTGCGACAACCAGTATTCGGGGAACGCTGGCTGCCACGTCGTTCTACTGGATC
AAAAGCTAGAAACGATAGCGTGAGTTGGGTATCTACTGTGCAATAAAAATGTCCATGACG
ACTTATGTGCGTCCGAT
>Rosalind_7522
TGGTACTTACCGTAGTACACGTCACGCCGCGCTCAAATTTCGTGTGAGCCGGCTTCGACC
AATCACGCTGACTTCTTTGGAGTTGGCCCCCCTAACCCGAATGACGCACGTGGACTGAAG
CATGGAGCTTCTGACGCAACCGACTCCGGTAGTTTGCGATCGTGATGATGGCGAGTAGTT
CCAAATACTGTGCCAAACTAAACTGGTTACACGGCGCCTTTGAAAGATTACATCTGTAAT
ACAGCCTATCTTAACAGGACAAGTAGTCTTGCCGGGGGAGGGTTCTGGGCGTATTAACTC
AAAGCATTGCGAATAACTCGTAACTGAGTGTCTTAAAAAGAGCCTCAATTCCCGAACCTA
CAGCGGAATGTATTTGCCAATTCCAGGATTTTTGCGCTAGTTACTTGTCACGCTGAACAC
TTCCCGCGCTGTAGGTCGTTTTACGGTGTGTCCCCCAGCATTCTTGCTTGTGTAAGCAAA
CCAGCCAAATATGTTGTATGATCCTTACACACAGGATACGGTAAGTGACCTGAAAGAGCC
ATGCAATTAAGGTATTTTCGTACGCCAACTATTAGTTCGAACGTGACCAACCTAGCCAGA
CCTCCTGACAGCTTTGTTCTATCGGGCCCGGAGACCAAACCCCAGTGTGCCTCGTGCTAG
TTCCTGAAGTTAATATGATAAGTAACGTCGGTCATCCCGCCCCCACCGGTCATTCGGTAT
GTGGCATCCGCCCTTGGCAGCGGCAGGTCTCCCTCGAATGTCAGCGCCAAAATCGAGTCG
AACTTGTGGTAACTAAGCGTCGGCTTGCTGTCGGGGCGTTCCTATATGCTTAAAAGCTCT
AATTGTTTCTAAAGATCGACCGTT
>Rosalind_2514
CACGTATCCCCCCGTCACCGAAGGCGGAAGAACAGGTGAGCTTCTTAAATTTATGTCCAG
TCTCCCCCGGTGGCCCTGTATGAAAAGGTGAGGAGTACTGAAGTAGTTTGATAACACGAC
GACCAGCAAATAGATTCGTGGATATGGGCTTTACCACCAAAATGGCCGAAAGGAATACCT
GGCGGCTCTTCCGTGTACGCCCTACGCATGCCGTTTTGCCGCACTTCATATATTTTTAGT
ATTGCGTGATGGGGAGGGAACAGCCGCCGGTCCAGCTAATATTGCGGATTCTACTATGGT
CCGGGAGGTAATGAGGTAGGCGTCGTGCTTGACGGCCTGGTTACGTTACGGGGCGGGGGC
ATGAAGCCGATCTGAGAGTGTGATACAGTCCTGAATGTACTACTCTCGCTTCAAGAGCAC
TATTTAACCTTACAAAAAGCTTGAGTGCCGCTCGCTTATAGCAGAGACGAGCCGAACATG
CGAGGCTCATTGAAATGTCCAGGACTATTGTGACTGATAAATGAAGCGAGATGCGCTAAT
CAATTATTTTTCGGAGGTCCCCCTGTCGATGCACAGGAAACGGATTTAGATGTAAAGAGC
TCTCTAGCGCCCGCCGAGCAATATCGGAGCCAGACCCTGTTGTTGATCAACGAGCCACCC
AGGTGCACTATGGCGGTATAAGAGAGGGCCCTCACTGAGAACTGCCGGCAAATATAATCC
CCGGTATAAATAAACGCCGCCTTTATTTGTTGGATGACTCATCCAGATTGTTAGACTTGC
CCCTGGAAGGCCGGAGCCGATATGACGATGAAGTCCCCCATTTGGGTCTCCGACTCTCGA
TTGCTAGCGTCCTACTAAACCCGAGACGGTGAGCCCACCAGTCATCCGAGTCCCGAATTT
GAGCGCGCCTGCTCT
>Rosalind_5992
GGCGAGATGAGCTCTTAGAATGTGTAGTTCGCGTACCTGCGCCTCCCGATAGAGCACTGC
CTAGTCTTAAATTTGATGGTACGACTGATCGGTTCGGTACCGCTGCGTTTAAGCACGGAA
AGGATAGATAGTGGGATGGACTGAAAAGTTCACGGCAGACGCACCAGGTCTTACGGTAGC
CTATCCGGCGTGTGCTCTACAACCAAAATTGGGTAGCCAAAAATAAACTCTATATCAACA
ACGGACTACGACTGGAATATTGAGATTGTTTGCAATTAGGAGCGCAATGCAAGTAGCCGT
GCTTCAGGGTCGAGACTGCTATGCGTTCAACAGGCCTGGGGTCGTTACTAGGTCGCGTAT
TTTTGACGAGCACCTATCTTGGAACCGGAACTGGGGACCGGAGCTGGATAAGGTGTTTCC
TACGTATGCGACTCTATCAACCGGAAAAAGCTTTAATGGTCCTTTTTCCTCCGAGGTACC
TCGGGTCATGTCTGTCCACTTAACCCAAGCCGAATTCGCTATCTGTATACGAGGTTCACC
GGGACTATCGTAGCGGATATACGTTTGACCAGTACCTCCCAGACGCATACTGTCGATCCG
CGCCCGGACATTCAACCAGAACCTGACTTTCACAAAAGACTCACCATATTCGACCTTGAG
AGGGTCTGGGTGTGACTATTAAATGCAGAACCATAATAAAACAAACCCTAGTCGGAGTGT
GCGGGACGCGGAACACGGATAGAGCCACGAGGTTAGATTCCTCGACGGAAAGGTATTTGC
GAACCTAGCGACCTCTTGCCCACTTTTCGCCTCACGGC
