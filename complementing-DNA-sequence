# First I assigned the data set to the variable ds

ds = 'TGAAAGTTCGAGTTGCATTTTCCTGCCGCGACCAGTTCTGAAATGTCTGTTCAGGGTTGGCAACCGCCCGATCTCATGACTATCGTTTACTCTAACGACATTCATCCCGCAGCAGCTATTGCTGCTCTAGGAGCCAGAGAAACAAGGTCACTCGGACAAGCTAAGCTGGGGAATAGTAGAATACATACAACAATCCCCAATAAGCCGTATCTACGGGAGCGCCCCGACCCTGTCCCGGTGCTTATCCTTTCTAACAGAAGCATTACTACGTATAAGGGCTCTACGACCTTGATTAAAGGACGATAAATATTGGATTCGGATGGTGAGGTCGAATGCAACGTGGTTACCATCACTATACGAACTTGAGACAAACCCGACGACACTTTCTGACAGGGGTAGGAGAGAGAGTCAACGGGTAGCTCCGCTGAGGTAATGTACCCGGGGTGACGGAACGGCCATGTACGACCTTATGTATGGCCACAGTCTACTCCGTCGAATTATTTATGATGGCCGCCATAACATGAAAACAACATACCTTCCGGTAACAGGATCCCGCTACACGAATGAATAACTATTACCCACTACTGAAAGCTGGCTTTTTAGGTACATTGAAAATATCGTTTTAGTTTGTAGGCTCCCATAATCATATGGCGTATATGTAATTGTGGTGCTGTGGTGGACGGGGGTCTGCCATTTAACGAGGTACGTCCCGACAATCGCCACTTCAGGCCCTAGCATTCTAGTCCACCGCCAAGCGTGATGCCTAGTTAGTGAGAATCACCCAGATGCCATCCAAGACCGAGATCTAGTGGCGGGTCTTGCACTCTTGACGTTTGGGCTACTTCTCGAAAGAAATCGATAATCAACGCATTTGATTCAAGGTTATCGTCCCCTTATTTACCGCTCCTCACTTTTCTCGTTAGAGGATCCG'

# Using a splice funtion the reversed the order of the DNA sequence calling it dsr

dsr = ds[::-1]

# Here I used the replace function to assign the bases to their complimentary base as a lower case so that down-stream replace functions dont intrupt the code

dscOne = dsr.replace('A', 't')
dscTwo = dscOne.replace('G', 'c')
dscThree = dscTwo.replace('T', 'a')
dscFour = dscThree.replace('C', 'g')

# This set of functions is simply to replace the lower case characters with their uppercase counterparts

dyOne = dscFour.replace('a', 'A')
dyTwo = dyOne.replace('g', 'G')
dyThree = dyTwo.replace('t', 'T')
dyFour = dyThree.replace('c', 'C')

print(dyfour)
